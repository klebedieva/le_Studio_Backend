<?php
function makeMenuLink($text, $url = '404.php') {
    return '<li><span class="me-1">‚Äì</span><a href="' . $url . '" class="footer-link">' . htmlspecialchars($text) . '</a></li>'; // htmlspecialchars() transforme les caract√®res sp√©ciaux en texte lisible (Exemple : < devient &lt; pour √©viter l'affichage ou l'ex√©cution de code HTML)
}

function makeTextLink($text, $url = '404.php') {
    return '<a href="' . $url . '" class="footer-link">' . htmlspecialchars($text) . '</a>'; 
}

function nav_item(string $page, string $label): string {
    return '<li class="nav-item hover-menu ' . active_link($page) . '">
                <a class="nav-link" href="' . $page . '">' . $label . '</a>
            </li>';
}

function active_link(string $page): string {
    $current_page = basename($_SERVER['PHP_SELF']);
    return $current_page === $page ? 'active' : '';
}


function dropdown_nav_item(string $label, array $sub_items): string {
    $menu = '<li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle hover-menu"
                   href="#"
                   role="button"
                   data-bs-toggle="dropdown"
                   aria-expanded="false">' . $label . '</a>
                <ul class="dropdown-menu bg-black z-3 px-2">';

    foreach ($sub_items as $item) {
        $menu .= '<li>
                    <a class="dropdown-item text-white hover-dropdown ps-3-responsive"
                       href="' . $item['url'] . '">' . $item['label'] . '</a>
                  </li>';
    }

    $menu .= '</ul></li>';
    return $menu;
}

function render_navbar(array $main_menu, array $activites_menu, array $socialLinks): string { // –¥e mot-cl√© array sert √† indiquer que chaque argument doit √™tre un tableau
    ob_start(); // permet de capturer le contenu HTML g√©n√©r√© par le code PHP sans l'afficher tout de suite. Le contenu est enregistr√© dans un tampon (buffer). Ensuite, on peut le r√©cup√©rer sous forme de cha√Æne avec ob_get_clean();
    ?>
    <nav class="navbar navbar-expand-lg bg-transparent position-absolute z-2 w-100">
        <div class="container-fluid menu-logo p-0">
            <a class="navbar-brand m-0" href="./indexv2.php">
                <img src="./assets/img/logo.png" class="logo" alt="Logo Le studio" />
            </a>

            <button
                class="navbar-toggler me-3 custom-toggler d-flex align-items-center gap-2 font-oswald"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarNavDropdown"
                aria-controls="navbarNavDropdown"
                aria-expanded="false"
                aria-label="Toggle navigation"
            >
                <span class="language-badge-inside">
                    <span class="language-text">EN</span>
                </span>
                <i class="fa-solid fa-bars"></i>
            </button>

            <div class="collapse navbar-collapse justify-content-center" id="navbarNavDropdown">
                <ul class="navbar-nav color-menu font-oswald">
                    <?php
                    // 1. L'EQUIPE
                    if (!empty($main_menu)) {
                        echo nav_item($main_menu[0]['url'], $main_menu[0]['label']); // V√©rifie si le tableau $main_menu n‚Äôest pas vide. Si ce tableau contient au moins un √©l√©ment, on affiche le premier lien de menu avec la fonction nav_item().
                    }

                    // 2. LES ACTIVIT√âS drop-down
                    echo dropdown_nav_item('LES ACTIVIT√âS', $activites_menu); // Affiche un √©l√©ment de menu d√©roulant avec le titre 'LES ACTIVIT√âS', en utilisant les donn√©es contenues dans le tableau $activites_menu.

                    // 3. Other menu items
                    for ($i = 1; $i < count($main_menu); $i++) {
                        echo nav_item($main_menu[$i]['url'], $main_menu[$i]['label']); // Parcourt le tableau $main_menu √† partir du 2e √©l√©ment (index 1) et affiche chaque lien avec la fonction nav_item().
                    }
                    ?>

                    <li class="nav-item">
  <a class="nav-link" href="<?= isset($_SESSION['user']) ? 'actions/logout.php' : 'login.php' ?>">
    <?= isset($_SESSION['user']) ? 'SE D√âCONNECTER' : 'SE CONNECTER' ?>
  </a>
</li>
           

                    <li class="nav-item d-flex align-items-center mx-lg-1">
                        <a class="nav-link d-flex align-items-center justify-content-center gap-2 me-2" href="#">
                            <i class="bi bi-phone"></i> 05.59.47.84.18
                        </a>
                    </li>

                    <li class="nav-item d-flex justify-content-center p-0 align-items-center gap-1">
                        <?php foreach ($socialLinks as $link): ?>
                         <!-- G√©n√®re une ic√¥ne de r√©seau social avec son lien, sa classe CSS et son label accessible -->
                            <a
                                href="<?= $link['url'] ?>"
                                class="<?= $link['class'] ?>"
                                aria-label="<?= $link['aria'] ?>"
                                target="_blank"
                            ></a>
                        <?php endforeach; ?>
                    </li>

                    <li class="language-badge d-none d-lg-block mx-3">
                        <a href="#" class="language-text" aria-label="Changer la langue en anglais">EN</a>
                    </li>
     </ul>
            </div>
        </div>
    </nav>
    <?php
    return ob_get_clean(); // Retourne le contenu HTML captur√© sous forme de cha√Æne
}


// Affiche un message de succ√®s s‚Äôil existe dans la session
function afficherMessageSucces() {
    if (!empty($_SESSION['succes'])) {
        echo '<div class="alert alert-success mb-4">' . htmlspecialchars($_SESSION['succes']) . '</div>'; // Affiche le message dans une alerte Bootstrap de type "success"
        unset($_SESSION['succes']); // Affiche le message dans une alerte Bootstrap de type "success"
    }
}

// Affiche un message d‚Äôerreur s‚Äôil existe dans la session
function afficherMessageErreur() {
    if (!empty($_SESSION['erreur'])) {
        echo '<div class="alert alert-danger mb-4">' . htmlspecialchars($_SESSION['erreur']) . '</div>'; // Affiche le message dans une alerte Bootstrap de type "danger"
        unset($_SESSION['erreur']); // Supprime le message de la session pour qu‚Äôil ne s‚Äôaffiche qu‚Äôune seule fois
    }
}

function getServicesParAbonnement($services, $abonnements, $type_abonnement) {
    $resultat = [];

    // V√©rifie si l‚Äôabonnement existe dans la liste
    if (!isset($abonnements[$type_abonnement])) {
        return $resultat;
    }

    // Liste des IDs de services autoris√©s pour cet abonnement
    $services_autorises = $abonnements[$type_abonnement];

    // Parcourt tous les services
    foreach ($services as $service) {
        // Si le service est autoris√©, on l'ajoute dans le r√©sultat
        if (in_array($service['id'], $services_autorises)) {
            $resultat[] = $service;
        }
    }

    return $resultat;
}


// Fonction resizeImage : redimensionner une image sans d√©former (en gardant les proportions)
function resizeImage($sourcePath, $destPath, $newWidth, $newHeight) {
    // R√©cup√®re les informations sur l'image (dimensions + type MIME)
    $info = getimagesize($sourcePath);
    $mime = $info['mime']; // Exemple : 'image/jpeg', 'image/png', etc.

    // üñºÔ∏è Ouvre l'image selon son format (JPEG, PNG ou WEBP)
    switch ($mime) {
        case 'image/jpeg':
            $srcImage = imagecreatefromjpeg($sourcePath); // Ouvre une image JPEG
            break;
        case 'image/png':
            $srcImage = imagecreatefrompng($sourcePath); // Ouvre une image PNG
            break;
        case 'image/webp':
            $srcImage = imagecreatefromwebp($sourcePath); // Ouvre une image WEBP
            break;
        default:
            return false; // ‚ùå Format non support√©, on arr√™te ici
    }

    // üî¢ On r√©cup√®re les dimensions d'origine de l'image
    $width = imagesx($srcImage);   // Largeur originale
    $height = imagesy($srcImage);  // Hauteur originale

    // üìê Calcul du ratio pour redimensionner sans d√©former
    $ratio = min($newWidth / $width, $newHeight / $height); // On garde le plus petit ratio
    $finalWidth = (int)($width * $ratio);   // Nouvelle largeur en respectant les proportions
    $finalHeight = (int)($height * $ratio); // Nouvelle hauteur en respectant les proportions

    // üìÑ On cr√©e une nouvelle image vide (de la taille finale)
    $resized = imagecreatetruecolor($finalWidth, $finalHeight);

    // üé® Si c‚Äôest un PNG, on garde la transparence
    if ($mime === 'image/png') {
        imagealphablending($resized, false); // D√©sactive le m√©lange de couleurs
        imagesavealpha($resized, true);      // Active la transparence
    }

    // üß© Copie et redimensionne l‚Äôimage d‚Äôorigine vers la nouvelle image vide
    imagecopyresampled(
        $resized, $srcImage,
        0, 0, 0, 0,
        $finalWidth, $finalHeight,
        $width, $height
    );

    // üíæ Enregistre l‚Äôimage redimensionn√©e dans le bon format
    switch ($mime) {
        case 'image/jpeg':
            imagejpeg($resized, $destPath, 90); // Qualit√© 90%
            break;
        case 'image/png':
            imagepng($resized, $destPath);      // PNG sans perte
            break;
        case 'image/webp':
            imagewebp($resized, $destPath, 90); // WEBP qualit√© 90%
            break;
    }

    // üßΩ Lib√®re la m√©moire utilis√©e par les images
    imagedestroy($srcImage);   // Lib√®re l‚Äôimage source
    imagedestroy($resized);    // Lib√®re l‚Äôimage redimensionn√©e

    return true; // ‚úÖ Succ√®s : image redimensionn√©e et sauvegard√©e
}

// V√©rifie la validit√© d'un fichier image upload√© (type, taille, extension, dimensions)
function validateImageUpload($tmpName, $fileName) {
    // Types MIME autoris√©s
    $allowedMimeTypes  = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    // Extensions autoris√©es
    $allowedExtensions = ['jpg', 'jpeg', 'png', 'webp', 'gif'];
    // Taille maximale autoris√©e (5 Mo)
    $maxFileSize       = 5 * 1024 * 1024;

    // D√©tecte le vrai type MIME du fichier (bas√© sur son contenu)
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mimeType = finfo_file($finfo, $tmpName);
    finfo_close($finfo);

    // V√©rifie si le type MIME d√©tect√© est autoris√©
    if (!in_array($mimeType, $allowedMimeTypes)) {
        return "Format non support√©.";
    }
    // V√©rifie la taille du fichier
    if (filesize($tmpName) > $maxFileSize) {
        return "Fichier trop volumineux (max 5 Mo).";
    }
    // V√©rifie l'extension du fichier
    $ext = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
    if (!in_array($ext, $allowedExtensions)) {
        return "Extension non autoris√©e.";
    }
    // V√©rifie les dimensions de l'image
    $imageInfo = getimagesize($tmpName);
    if (!$imageInfo) {
        return "Impossible de lire les dimensions de l'image.";
    }
    if ($imageInfo[0] < 100 || $imageInfo[1] < 100) {
        return "Image trop petite (minimum 100x100px).";
    }
    // Retourne les informations n√©cessaires pour le traitement ult√©rieur
    return [
        'mime' => $mimeType,
        'extension' => $ext,
        'width' => $imageInfo[0],
        'height' => $imageInfo[1]
    ];
}
